# -*- coding: utf-8 -*-
"""MissingData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z8ppfu0xb68FtsUbxgOigFqyRZapoWSi
"""

import numpy as np
import pandas as pd
import seaborn as sns

"""#Dealing with Missing Data"""

x = np.array([1,2,3,4,5])

x.sum()

print(x.dtype)

#Missing Data
x = np.array([1,2,3,'--' ,5])

print(x.dtype)

#Standard way to represent missing data....
x = np.array([1,2,3,None,5])

x.sum()
#throws error........

# nan -> means here is something but not a number......
x = np.array([1,2,3,np.nan ,5])

x.sum()
#does not prints right result......

#need solution..
x_b = np.array([True, True, True, False, True])

x[x_b].sum()

x[x_b].mean()

#Instead of creating of its own, there is numpy sub-module...
# masked array....

m_x = np.ma.masked_array(x, mask = [0,0,0,1,0])

m_x.sum()

m_x.mean()

"""#Dealing with Missing Values"""

df = pd.read_csv('rooms.csv')

df.head()

df.dtypes

# Commented out IPython magic to ensure Python compatibility.
# %timeit np.arange(10000, dtype="int").sum()

# Commented out IPython magic to ensure Python compatibility.
# %timeit np.arange(10000, dtype="object").sum()

df.Room_Number.isnull()
#true means missing values

# now to find number of times missing value occured.....
df.Room_Number.isnull().sum()
# results 1 missing value.....

df.isnull()

df.isnull().sum()
# sums up missing values in dataset....

missing_values = ["NA", "n/a", "na"]

df = pd.read_csv("rooms.csv",
                 na_values = missing_values)

df.isnull()

df.Num_Students.sum()

df.Num_Students.mean()

missing_values = ["NA", "n/a", "na", "Empty", "--"]

df = pd.read_csv("rooms.csv",
                 na_values = missing_values)

df.isnull()

# uniue () -> gives the list of missing abstracts ....
df.Department.unique()

df.Occupied.unique()

df.isnull()

df

missing_values = ["NA", "n/a", "na", "Empty", "--", "NaN"]

df = pd.read_csv("rooms.csv",
                 na_values = missing_values)

df.isnull()

df

df.Occupied.fillna("N", inplace=True)

df

def covert_to_binary(v):
    if v == "Y":
        return True
    else:
        return False

df.Occupied = df.Occupied.apply(convert_to_binary)

df

df["Dept2"] = df.Department

df.Department.fillna(method="ffill", inplace =True)
# or
df.Department.fillna(method="pad", inplace =True)

df

df.Department.fillna(method="bfill", inplace =True)

df

df.Num_Students.fillna(df.Num_Students.median(), inplace = True)

df

#interpolate -> fills the missing number within the range of
# number we have ...........
df.Room_Number.interpolate()

df.Room_Number.interpolate(inplace = True)

df

